{"ast":null,"code":"// Created by backend\n// to Import > import {registerUser, loginUser, anyotherfunction needed} from \"../utils/services.js\"; remove the .. if not in pages\n\nexport const baseUrl = \"http://localhost:5000/api\";\nexport const postRequest = async (url, body) => {\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    let message;\n    if (data !== null && data !== void 0 && data.message) {\n      message = data.message;\n    } else {\n      message = data;\n    }\n    return {\n      error: true,\n      message\n    };\n  }\n  return data;\n};\nexport const getRequest = async url => {\n  const response = await fetch(url);\n  const data = await response.json();\n  if (!response.ok) {\n    let message = \"error\";\n    if (data !== null && data !== void 0 && data.message) {\n      message = data.message;\n    }\n    return {\n      error: true,\n      message\n    };\n  }\n  return data;\n};\n\n/*\n    > The Functions below are for registering, loging in, and getting all users\n*/\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await postRequest(`${baseUrl}/users/register`, JSON.stringify({\n      username: username,\n      password: password\n    }));\n    return response;\n  } catch (error) {\n    console.log(error);\n    return \"error registerUser try function failed\";\n  }\n};\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await postRequest(`${baseUrl}/users/login`, JSON.stringify({\n      username: username,\n      password: password\n    }));\n    return response;\n  } catch (error) {\n    console.log(error);\n    return \"error loginUser try function failed\";\n  }\n};\nexport const getUsers = async () => {\n  try {\n    const response = await getRequest(`${baseUrl}/users/`);\n    return response;\n  } catch (error) {\n    console.log(error);\n    return \"error getUsers try function failed\";\n  }\n};\n\n/*\n    > The Functions below are for accessing and inserting information for profiles\n*/\nexport const createProfile = async (username, status, bio) => {\n  try {\n    const response = await postRequest(`${baseUrl}/profiles/createProfile`, JSON.stringify({\n      username: username,\n      status: status,\n      bio: bio\n    }));\n    return response;\n  } catch (error) {\n    console.log(error);\n    return \"error createProfile try function failed\";\n  }\n};\nexport const findProfile = async username => {\n  try {\n    const response = await postRequest(`${baseUrl}/profiles/findProfile`, JSON.stringify({\n      username: username\n    }));\n    return response;\n  } catch (error) {\n    console.log(error);\n    return \"error findProfile try function failed\";\n  }\n};\nexport const changeStatus = async (username, newStatus) => {\n  try {\n    const response = await postRequest(`${baseUrl}/profiles/changeStatus`, JSON.stringify({\n      username: username,\n      newStatus: newStatus\n    }));\n    return response;\n  } catch (error) {\n    console.log(error);\n    return \"error changeStatus try function failed\";\n  }\n};\nexport const changeBio = async (username, newBio) => {\n  try {\n    const response = await postRequest(`${baseUrl}/profiles/changeBio`, JSON.stringify({\n      username: username,\n      newBio: newBio\n    }));\n    return response;\n  } catch (error) {\n    console.log(error);\n    return \"error changeBio try function failed\";\n  }\n};\nexport const getProfiles = async () => {\n  try {\n    const response = await getRequest(`${baseUrl}/profiles/`);\n    return response;\n  } catch (error) {\n    console.log(error);\n    return \"error getProfiles try function failed\";\n  }\n};\n\n/*\n    > The Functions below are for accessing the calendar database\n*/\n\nexport const getallCalendarData = async () => {\n  try {\n    const response = await getRequest(`${baseUrl}/calendar/`);\n    return response;\n  } catch (error) {\n    console.log(error);\n    return \"Error getAllCalendarData() function failed\";\n  }\n};\nexport const findEventsByDate = async start_date => {\n  try {\n    // Replace '/' with '%2F' for proper encoding\n    const encodedDate = start_date.replace(/\\//g, '%2F');\n    const response = await getRequest(`${baseUrl}/calendar/${encodedDate}`);\n    return response;\n  } catch (error) {\n    console.log(error);\n    return \"Error findEventsByDate() function failed\";\n  }\n};\n\n/*\n    > The Functions below are for accessing the Image database\n*/\n\nexport const uploadImage = async (username, imageFile) => {\n  try {\n    const formData = new FormData();\n    formData.append('username', username);\n    formData.append('image', imageFile);\n    const response = await postRequest(`${baseUrl}/api/images/uploadImage`, formData);\n    return response; // The response from the backend (success/failure)\n  } catch (error) {\n    console.log(error);\n    return \"error uploadImage try function failed\";\n  }\n};\nexport const findImage = async username => {\n  try {\n    const response = await postRequest(`${baseUrl}/image/findImage`, JSON.stringify({\n      username: username\n    }));\n    return response;\n  } catch (error) {\n    console.log(error);\n    return \"error findImage try function failed\";\n  }\n};\nexport const getAllGymData = async () => {\n  try {\n    const response = await getRequest(`${baseUrl}/gym/`);\n    return response;\n  } catch (error) {\n    console.log(error);\n    return \"Error getAllGymData() function failed\";\n  }\n};\nexport const findGym = async gym_name => {\n  try {\n    const response = await getRequest(`${baseUrl}/gym/${gym_name}`);\n    return response;\n  } catch (error) {\n    console.log(error);\n    return \"Error findGym() function failed\";\n  }\n};","map":{"version":3,"names":["baseUrl","postRequest","url","body","response","fetch","method","headers","data","json","ok","message","error","getRequest","registerUser","username","password","JSON","stringify","console","log","loginUser","getUsers","createProfile","status","bio","findProfile","changeStatus","newStatus","changeBio","newBio","getProfiles","getallCalendarData","findEventsByDate","start_date","encodedDate","replace","uploadImage","imageFile","formData","FormData","append","findImage","getAllGymData","findGym","gym_name"],"sources":["/Users/shubhan/CS35L-Bruin-Active-/client/BA_Frontend/src/utils/services.js"],"sourcesContent":["// Created by backend\n// to Import > import {registerUser, loginUser, anyotherfunction needed} from \"../utils/services.js\"; remove the .. if not in pages\n\nexport const baseUrl = \"http://localhost:5000/api\";\n\nexport const postRequest = async(url, body) => {\n    const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body,\n    });\n\n    const data = await response.json()\n\n    if(!response.ok) {\n        let message;\n\n        if(data?.message) {\n            message = data.message;\n        } else {\n            message = data;\n        }\n\n        return { error: true, message };\n    }\n\n    return data;\n}\n\nexport const getRequest = async(url) => {\n    const response = await fetch(url);\n\n    const data = await response.json();\n\n    if(!response.ok) {\n        let message = \"error\";\n\n        if(data?.message) {\n            message = data.message;\n        }\n\n        return { error: true, message };\n    }\n\n    return data;\n}\n\n/*\n    > The Functions below are for registering, loging in, and getting all users\n*/\nexport const registerUser = async(username, password) => {\n    try {\n        const response = await postRequest(`${baseUrl}/users/register`, JSON.stringify({username: username, password: password}));\n\n        return response;\n    } catch(error) {\n        console.log(error);\n        return \"error registerUser try function failed\";\n    }\n}\n\nexport const loginUser = async(username, password) => {\n    try {\n        const response = await postRequest(`${baseUrl}/users/login`, JSON.stringify({username: username, password: password}));\n\n        return response;\n    } catch(error) {\n        console.log(error);\n        return \"error loginUser try function failed\";\n    }\n}\n\nexport const getUsers = async() => {\n    try {\n        const response = await getRequest(`${baseUrl}/users/`);\n\n        return response;\n    } catch(error) {\n        console.log(error);\n        return \"error getUsers try function failed\";\n    }\n}\n\n/*\n    > The Functions below are for accessing and inserting information for profiles\n*/\nexport const createProfile = async(username, status, bio) => {\n    try {\n        const response = await postRequest(`${baseUrl}/profiles/createProfile`, JSON.stringify({username: username, status: status, bio: bio}));\n\n        return response;\n    } catch(error) {\n        console.log(error);\n        return \"error createProfile try function failed\";\n    }\n}\n\nexport const findProfile = async(username) => {\n    try {\n        const response = await postRequest(`${baseUrl}/profiles/findProfile`, JSON.stringify({username: username}));\n\n        return response;\n    } catch(error) {\n        console.log(error);\n        return \"error findProfile try function failed\";\n    }\n}\n\nexport const changeStatus = async(username, newStatus) => {\n    try {\n        const response = await postRequest(`${baseUrl}/profiles/changeStatus`, JSON.stringify({username: username, newStatus: newStatus}));\n\n        return response;\n    } catch(error) {\n        console.log(error);\n        return \"error changeStatus try function failed\";\n    }\n}\n\nexport const changeBio = async(username, newBio) => {\n    try {\n        const response = await postRequest(`${baseUrl}/profiles/changeBio`, JSON.stringify({username: username, newBio: newBio}));\n\n        return response;\n    } catch(error) {\n        console.log(error);\n        return \"error changeBio try function failed\";\n    }\n}\n\nexport const getProfiles = async() => {\n    try {\n        const response = await getRequest(`${baseUrl}/profiles/`);\n\n        return response;\n    } catch(error) {\n        console.log(error);\n        return \"error getProfiles try function failed\";\n    }\n}\n\n/*\n    > The Functions below are for accessing the calendar database\n*/\n\nexport const getallCalendarData = async() => {\n    try {\n        const response = await getRequest(`${baseUrl}/calendar/`);\n        return response;\n    } catch (error) {\n        console.log(error);\n        return \"Error getAllCalendarData() function failed\"\n    }\n}\n\nexport const findEventsByDate = async(start_date) => {\n    try {\n        // Replace '/' with '%2F' for proper encoding\n        const encodedDate = start_date.replace(/\\//g, '%2F');\n        const response = await getRequest(`${baseUrl}/calendar/${encodedDate}`);\n        return response;\n    } catch (error) {\n        console.log(error);\n        return \"Error findEventsByDate() function failed\"\n    }\n}\n\n/*\n    > The Functions below are for accessing the Image database\n*/\n\nexport const uploadImage = async (username, imageFile) => {\n    try {\n        const formData = new FormData();\n        formData.append('username', username);\n        formData.append('image', imageFile);\n\n        const response = await postRequest(`${baseUrl}/api/images/uploadImage`, formData);\n        return response; // The response from the backend (success/failure)\n    } catch (error) {\n        console.log(error);\n        return \"error uploadImage try function failed\";\n    }\n};\n\nexport const findImage = async (username) => {\n    try {\n        const response = await postRequest(`${baseUrl}/image/findImage`, JSON.stringify({username: username}));\n\n        return response;\n    } catch(error) {\n        console.log(error);\n        return \"error findImage try function failed\";\n    }\n}\n\nexport const getAllGymData = async() => {\n    try {\n        const response = await getRequest(`${baseUrl}/gym/`);\n        return response;\n    } catch (error) {\n        console.log(error);\n        return \"Error getAllGymData() function failed\"\n    }\n}\n\nexport const findGym = async(gym_name) => {\n    try {\n        const response = await getRequest(`${baseUrl}/gym/${gym_name}`);\n        return response;\n    } catch (error) {\n        console.log(error);\n        return \"Error findGym() function failed\"\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}